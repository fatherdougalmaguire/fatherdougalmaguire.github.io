<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-22T18:53:25+10:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">An ecumenical matter</title><subtitle>This is my site. It&apos;s nothing fancy.</subtitle><author><name>Tony Sanchez</name></author><entry><title type="html">Introducing Abeja - the first iteration of a Microbee emulator</title><link href="http://localhost:4000/projects/microbee/2025/07/21/Introducing-Abeja.html" rel="alternate" type="text/html" title="Introducing Abeja - the first iteration of a Microbee emulator" /><published>2025-07-21T00:00:00+10:00</published><updated>2025-07-21T00:00:00+10:00</updated><id>http://localhost:4000/projects/microbee/2025/07/21/Introducing-Abeja</id><content type="html" xml:base="http://localhost:4000/projects/microbee/2025/07/21/Introducing-Abeja.html"><![CDATA[<p>Given that the Microbee range never sold in the same numbers as contemporary home computers such as the ZX Spectrum or Commodore 64,  there were only ever a handful of emulators built for the Microbee.  And these were primarily targeted at Windows and Linux platforms.</p>

<p>Since I use a Macintosh at home, I decided to roll my own.  And in a further act of bravado,  I attempted to do it completely scratch without studying any existing emulators.</p>

<p>This proved challenging on many fronts.</p>

<ul>
  <li>The last time I had seriously coded was using Turbo Pascal on my early 90’s PC ( I think it was a 386SX-25 ).  Swift was a whole new ballgame language wise.</li>
  <li>I had absolutely no idea how to code GUI apps.</li>
  <li>I had only the vaguest clue about the hardware design and build of the Microbee.</li>
</ul>

<p>But I perservered and manage to knock out the first iteration, which I’ve named <a href="https://github.com/fatherdougalmaguire/Abeja" title="Abeja GitHub repository">Abeja</a>.<br />
For those that don’t know Abeja is Spanish for <strong>bee</strong> ( a little nod to my heritage ).</p>

<p><img src="/assets/images/abeja-0.195.png" alt="Abeja" /></p>

<p>Abeja will run on Intel and Apple Silicon Macintoshes running MacOS Sonoma or later.</p>

<p>After much swearing and pulling of hair,  Abeja has gotten to the point that :</p>

<ul>
  <li>It will attempt to start executing the BASIC interpreter in ROM</li>
  <li>It will show the contents of memory and registers during execution</li>
  <li>It show show a disassembly of the executing code</li>
  <li>You can start/stop/pause and step through executing code.</li>
  <li>A Metal shader is used to write output to the screen</li>
</ul>

<p>However the ahoc nature of Abeja’s development has led to a less than optimal structure.</p>

<p>1) There is a lot of code for a barely functioning emulator.<br />
2) Only 1/3 of the Z80 instruction set is currently emulated.<br />
3) The hardware ( apart from the screen output ) is not emulated at all ( mainly because I have no idea how to capture keyboard input, interface with storage devices or enable audio output )<br />
4) Challenges with SwiftUI’s <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel">MVVM</a> framework results in major performance issues</p>

<p>So I’m going to take the ( many ) lessons learnt and start afresh.</p>

<p><a href="https://github.com/fatherdougalmaguire/novato">Novato</a> is the second attempt at the project.<br />
Novato is Spanish for <strong>newbie</strong> ( which is a terrible pun but also kind of apt ).</p>

<p>I’m going to use this blog to document the build of Novato step-by-step,  starting with first principles.</p>]]></content><author><name>Tony Sanchez</name></author><category term="projects" /><category term="microbee" /><category term="Z80" /><category term="Emulation" /><category term="Retro Computing" /><category term="MacOS" /><category term="Swift" /><category term="SwiftUI" /><category term="Abeja" /><category term="Novato" /><summary type="html"><![CDATA[Given that the Microbee range never sold in the same numbers as contemporary home computers such as the ZX Spectrum or Commodore 64, there were only ever a handful of emulators built for the Microbee. And these were primarily targeted at Windows and Linux platforms.]]></summary></entry><entry><title type="html">Is there LifeOnMars ?</title><link href="http://localhost:4000/projects/corewars/2025/03/27/Is-there-LifeOnMars.html" rel="alternate" type="text/html" title="Is there LifeOnMars ?" /><published>2025-03-27T00:00:00+11:00</published><updated>2025-03-27T00:00:00+11:00</updated><id>http://localhost:4000/projects/corewars/2025/03/27/Is-there-LifeOnMars</id><content type="html" xml:base="http://localhost:4000/projects/corewars/2025/03/27/Is-there-LifeOnMars.html"><![CDATA[<p>I had made abortive attempts at building MARS environments for the <a href="\microbee">Microbee</a> ( and later the PC ) but nothing ever came to fruition.</p>

<p>So I decided to bite the bullet and finally complete one.</p>

<p>My implementation is called <a href="https://github.com/fatherdougalmaguire/LifeOnMARS" title="LifeOnMars GitHub repository">LifeOnMars</a></p>

<p>It is written for MacOS Sonoma ( v14.0+ ) using Swift/SwiftUI.</p>

<p><img src="/assets/images/lifeonmars-0.25.png" alt="LifeOnMars" /></p>

<p>It is more of a UI framework at this point but it will serve as a testbed for code patterns required for my other projects.</p>]]></content><author><name>Tony Sanchez</name></author><category term="projects" /><category term="corewars" /><category term="Redcode" /><category term="MARS" /><category term="Warriors" /><category term="MacOS" /><category term="Swift" /><category term="SwiftUI" /><summary type="html"><![CDATA[I had made abortive attempts at building MARS environments for the Microbee ( and later the PC ) but nothing ever came to fruition.]]></summary></entry></feed>